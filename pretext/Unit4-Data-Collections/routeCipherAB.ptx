<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="routeCipher">
  <title>FRQ Route Cipher A and B</title>

  
  <introduction>
    <idx>routeciphera</idx>
    <idx>free response</idx>
    <p>
      The following is a free response question from 2011. It was question 4 on
      the exam. You can see all the free response questions from past exams at
      <url
      href="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year"
      visual="https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year">https://apstudents.collegeboard.org/courses/ap-computer-science-a/free-response-questions-by-year</url>.
    </p>

    <p>
      In this question you will write two methods for a
      class <c>RouteCipher</c> that encrypts (puts into a coded form) a message
      by changing the order of the characters in the message. The route cipher
      fills a two-dimensional array with single-character substrings of the
      original message in row-major order, encrypting the message by retrieving
      the single-character substrings in column-major order.
    </p>

    <p>
      For example, the word “Surprise” can be encrypted using a 2-row, 4-column
      array as follows.
    </p>

    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/routeCipherFig.png" width="75%" />
    </figure>

    <p>
      An incomplete implementation of the <c>RouteCipher</c> class is shown
      below.
    </p>

    <program language="java">
      <code>
public class RouteCipher
{
    /**
     * A two-dimensional array of single-character strings, instantiated in the
     * constructor
     */
    private String[][] letterBlock;

    /** The number of rows of letterBlock, set by the constructor */
    private int numRows;

    /** The number of columns of letterBlock, set by the constructor */
    private int numCols;

    /**
     * Places a string into letterBlock in row-major order.
     *
     * @param str the string to be processed Postcondition: if str.length() &lt;
     *     numRows * numCols, "A" in each unfilled cell if str.length() &gt; numRows *
     *     numCols, trailing characters are ignored
     */
    public void fillBlock(String str)
    {
        /* to be implemented in part (a) */
    }

    /**
     * Extracts encrypted string from letterBlock in column-major order.
     * Precondition: letterBlock has been filled
     *
     * @return the encrypted string from letterBlock
     */
    private String encryptBlock()
    {
        /* implementation not shown */
    }

    /**
     * Encrypts a message.
     *
     * @param message the string to be encrypted
     * @return the encrypted message; if message is the empty string, returns the
     *     empty string
     */
    public String encryptMessage(String message)
    {
        /* to be implemented in part (b) */
    }

    // There may be instance variables, constructors, and methods that are not
    // shown
}
      </code>
    </program>
    </introduction>

<subsection xml:id="routeCipherA">
  <title>Route Cipher A Description</title>
    <p>
      <term>Part a.</term> Write the method <c>fillBlock</c> that fills the
      two-dimensional array <c>letterBlock</c> with one-character strings from
      the string passed as parameter <c>str</c>.
    </p>

    <p>
      The array must be filled in row-major order—the first row is filled from
      left to right, then the second row is filled from left to right, and so
      on, until all rows are filled.
    </p>

    <p>
      If the length of the parameter <c>str</c> is smaller than the number of
      elements of the array, the string “A” is placed in each of the unfilled
      cells. If the length of <c>str</c> is larger than the number of elements
      in the array, the trailing characters are ignored.
    </p>

    <p>
      For example, if <c>letterBlock</c> has 3 rows and 5 columns and <c>str</c>
      is the string “Meet at noon”, the resulting contents of <c>letterBlock</c>
      would be as shown in the following table.
    </p>

    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/routeCipherTable.png" width="28%" />
    </figure>

    <p>
      If <c>letterBlock</c> has 3 rows and 5 columns and <c>str</c> is the
      string “Meet at midnight”, the resulting contents of <c>letterBlock</c>
      would be as shown in the following table.
    </p>

    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/routeCipherTable2.png" width="28%" />
    </figure>

    <p>
      The following expression may be used to obtain a single-character string
      at position <c>k</c> of the string <c>str</c>.
    </p>

    <program language="java">
      <code>
str.substring(k, k + 1)
      </code>
    </program>
  </subsection>

  <subsection xml:id="routeciphera-scaffolding">
    <title>Route Cipher A Scaffolding</title>
    <activity label="routeciphera_short">
      <statement>
        <p>
          Explain in plain English what your code will have to do to answer this
          question. Use the variable names given above.
        </p>
      </statement>

      <response />
    </activity>

    <activity label="routeciphera_1.5MC">
      <statement>
        <p> You will need to access each element in the <c>letterBlock</c> array. 
        What type of loop should you use?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>for each</p>
          </statement>

          <feedback>
            <p>
              We need to utilize elements by indexing them so a for each loop
              will not work
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>if</p>
          </statement>

          <feedback>
            <p>This is not a type of loop</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>for</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>while</p>
          </statement>

          <feedback>
            <p>
              Although this could would, we would need some kind of tracker
              variable to allow use to count indexes which would be more easily
              accomplished by a different loop.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>switch </p>
          </statement>

          <feedback>
            <p>This would not work in this situation.</p>
          </feedback>
        </choice>
      </choices>
    </activity>


    <activity label="routeciphera_1.75MC">
      <statement>
        <p>The <c>letterBlock</c> array has two dimensions.How many loops should you use?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>1</p>
          </statement>

          <feedback>
            <p>This would not correctly iterate through the 2D array</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>2, nested</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>2, un-nested</p>
          </statement>

          <feedback>
            <p>This would not correctly iterate through the 2D array</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>3, un-nested</p>
          </statement>

          <feedback>
            <p>This would not correctly iterate through the 2D array</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="routeciphera_2MC">
      <statement>
        <p>
          What can you use to set the outer bound while you iterate through your
          2D array?
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>numRows</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>numCols</p>
          </statement>

          <feedback>
            <p>
              No, numCols finds the width and we are iterating through this in
              row-major order.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.length()</p>
          </statement>

          <feedback>
            <p>
              This finds us the length of the string but the array is not based
              on the string length.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str[0].length()</p>
          </statement>

          <feedback>
            <p>
              Strings aren't defined under the '[]' operator and str is not a 2D
              array so this would return an error.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="routeciphera_3MC">
      <statement>
        <p>
          What can you use to set the inner bound while you iterate through your
          2D array?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>numRows</p>
          </statement>

          <feedback>
            <p>
              No, numRows finds the width and should not be used as the inner
              bound because we are iterating through the array in row-major
              order.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>numCols</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.length()</p>
          </statement>

          <feedback>
            <p>
              This finds us the length of the string but the array is not based
              on the string length.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str[0].length()</p>
          </statement>

          <feedback>
            <p>
              Strings aren't defined under the '[]' operator and str is not a 2D
              array so this would return an error.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="routeciphera_4MC">
      <statement>
        <p>
          Which <c>String</c> method can you use to access partial or full
          strings within another string?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>str.length()</p>
          </statement>

          <feedback>
            <p>This does not return a string</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str(lowerbound, upperbound)</p>
          </statement>

          <feedback>
            <p>This is not a valid string method</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.subsection(lowerbound, upperbound)</p>
          </statement>

          <feedback>
            <p>This is not a valid string method</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>str.substring(lowerbound, upperbound)</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </activity>
  
    <activity label="routeciphera_5MC">
      <statement>
        <p>
          What is the formula for obtaining a single-character string at
          position <c>k</c> of the string <c>str</c>?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>str.substring(k, k)</p>
          </statement>

          <feedback>
            <p>This will not return the correct char correctly</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.substring(k + 1, k + 1)</p>
          </statement>

          <feedback>
            <p>This will not return the correct char correctly</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>str.substring(k, k + 1)</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.substring(k + 1, k)</p>
          </statement>

          <feedback>
            <p>This will not return the correct char correctly</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="routeciphera_5.5MC">
      <statement>
        <p>
          How can one find the aforementioned <c>k</c>? (this is hard to
          visualize, try drawing out some examples)
        </p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>str.substring(c + r * this.numCols, 1 + c + r * this.numCols)</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.substring(c - r * this.numCols, 1 + c - r * this.numCols)</p>
          </statement>

          <feedback>
            <p>
              Try using this formula to find a given character of one of the
              example strings. Does it work? Try coming up with some of your own
              examples to figure out the forumla for k.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.substring(c + r, 1 + c + r)</p>
          </statement>

          <feedback>
            <p>
              Try using this formula to find a given character of one of the
              example strings. Does it work? Try coming up with some of your own
              examples to figure out the forumla for k.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>str.substring(c - r, 1 + c - r)</p>
          </statement>

          <feedback>
            <p>
              Try using this formula to find a given character of one of the
              example strings. Does it work? Try coming up with some of your own
              examples to figure out the forumla for k.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="routeciphera_6MC">
      <statement>
        <p>
          What conditional can you write to make sure trailing characters are
          ignored?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>if (str.length() &lt; (c + (r * this.numCols)))</p>
          </statement>

          <feedback>
            <p>This will not return the correct boolean</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>if (str.length() &gt; (c + (r * this.numCols)))</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>if (str.length() &gt; numRows * numCols)</p>
          </statement>

          <feedback>
            <p>
              We need to determine whether or not to ignore trialing character
              at each step, not just check for it once at the beginning.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>if (str.length() &lt; numRows * numCols)</p>
          </statement>

          <feedback>
            <p>
              We need to determine whether or not to ignore trialing character
              at each step, not just check for it once at the beginning.
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="RouteCipherA" adaptive="yes" indentation="show" language="java">
      <statement>
        <p>
          The method fillBlock below contains the correct code for one solution
          to this problem, but it is mixed up. Drag the needed code from the
          left to the right and put them in order with the correct indention so
          that the code would work correctly.
        </p>
      </statement>

      <blocks>
        <block order="5">
          <cline>public void fillBlock(String str)</cline>
          <cline>{</cline>
          <cline>  int pos = 0;</cline>
        </block>

        <block order="1">
          <cline>  for (int r = 0; r &lt; this.numRows; r++ )</cline>
          <cline>  {</cline>
        </block>

        <block order="7">
          <cline>      for (int c = 0; c &lt; this.numCols; c++ )</cline>
          <cline>      {</cline>
        </block>

        <block order="3">
          <cline>          if (pos &lt; str.length())</cline>
          <cline>          {</cline>
        </block>

        <block order="2">
          <cline>              String subStr = str.substring(pos, pos+1);</cline>
          <cline>              this.letterBlock[r][c] = subStr;</cline>
          <cline>              pos++;</cline>
        </block>

        <block order="4">
          <cline>          } else</cline>
          <cline>          {</cline>
          <cline>              this.letterBlock[r][c] = "A";</cline>
          <cline>          } // end else block</cline>
        </block>

        <block order="6">
          <cline>      } // end inner for</cline>
          <cline>  } // end outer for</cline>
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="frqrouteciphera-solve">
    <title>Try And Solve FRQ Route Cipher A</title>
    <activity label="FRQRouteCipherA">
      <statement>
        <p>
          Complete the method <c>fillBlock</c> below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class RouteCipher
{
    /**
     * A two-dimensional array of single-character strings, instantiated in the
     * constructor
     */
    public String[][] letterBlock;

    /** The number of rows of letterBlock, set by the constructor */
    private int numRows;

    /** The number of columns of letterBlock, set by the constructor */
    private int numCols;

    public RouteCipher(int r, int c)
    {
        this.letterBlock = new String[r][c];
        this.numRows = r;
        this.numCols = c;
    }

    /**
     * Places a string into letterBlock in row-major order.
     *
     * @param str the string to be processed Postcondition: if str.length() &lt;
     *     numRows * numCols, "A" in each unfilled cell if str.length() &gt; numRows *
     *     numCols, trailing characters are ignored
     */
    public void fillBlock(String str)
    {
        // Complete this method

    }

    /**
     * Extracts encrypted string from letterBlock in column-major order.
     * Precondition: letterBlock has been filled
     *
     * @return the encrypted string from letterBlock
     */
    private String encryptBlock()
    {
        return "";
    }

    /**
     * Encrypts a message.
     *
     * @param message the string to be encrypted
     * @return the encrypted message; if message is the empty string, returns the
     *     empty string
     */
    public String encryptMessage(String message)
    {
        return "";
    }

    public static void main(String[] args)
    {

        boolean test1 = false;
        RouteCipher ciph = new RouteCipher(3, 3);

        ciph.fillBlock("There's 1");

        if ((ciph.letterBlock[0][2]).equals("e")
                &amp;&amp; (ciph.letterBlock[2][1]).equals(" "))
            test1 = true;
        else
            System.out.println(
                    "Oops! Looks like your code doesn't properly insert the given"
                        + " String.\n");

        if (test1)
            System.out.println("Looks like your code works well!");
        else
            System.out.println("Make a few changes, please.");
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Looks like your code works well!\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        RouteCipher ciph = new RouteCipher(3, 4);

        ciph.fillBlock("Lady Bugs");

        String result =
                String.valueOf(
                        (ciph.letterBlock[0][2]).equals("d")
                                &amp;&amp; (ciph.letterBlock[2][2]).equals("A"));
        boolean passed = getResults("true", result, "method fillBlock works");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

 
<subsection xml:id="routeCipherB">
  <title>Route Cipher B</title>
 
    <idx>routecipherb</idx>
    <p>
      <term>Part b.</term> Write the method <c>encryptMessage</c> that encrypts
      its string parameter message. The method builds an encrypted version of
      message by repeatedly calling <c>fillBlock</c> with consecutive,
      non-overlapping substrings of <c>message</c> and concatenating the results
      returned by a call to <c>encryptBlock</c> after each call to
      <c>fillBlock</c>. When all of <c>message</c> has been processed, the
      concatenated string is returned. Note that if <c>message</c> is the empty
      string, <c>encryptMessage</c> returns an empty string.
    </p>

    <p>
      The following example shows the process carried out if <c>letterBlock</c>
      has 2 rows and 3 columns and <c>encryptMessage("Meet at midnight")</c> is
      executed.
    </p>

    <figure align="center">
      <image source="Unit4-Data-Collections/Figures/routeCipherFig2.png" width="86%" />
    </figure>

    <p>
      In this example, the method returns the string “Mte eati dmnitgAhA”.
    </p>

    <p>
      Assume that <c>fillBlock</c> and <c>encryptBlock</c> methods work as
      specified. Solutions that reimplement the functionality of one or both of
      these methods will not receive full credit.
    </p>
  </subsection>

  <subsection xml:id="routecipherb-scaffolding">
    <title>Route Cipher B Scaffolding</title>
    <activity label="routecipherb_short">
      <statement>
        <p>
          Explain in plain English what your code will have to do to answer this
          question. Use the variable names given above.
        </p>
      </statement>

      <response />
    </activity>

    <activity label="FRQRouteCipherB_1.5MC">
      <statement>
        <p> To solve <c>encryptMessage</c>, you have a message that you need to process and
      concatenate. What type of loop could you use to solve this problem?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>while</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>if</p>
          </statement>

          <feedback>
            <p>You would need a loop.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>for</p>
          </statement>

          <feedback>
            <p>For this problem, a while loop would be easier to use.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>switch statement</p>
          </statement>

          <feedback>
            <p>You would need a loop.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBnorm_1">
      <statement>
        <p>What should your while statement conditional be?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>while (message.substring(k, k + 1) &lt; 0)</p>
          </statement>

          <feedback>
            <p>You do not need to apply that formula here.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>while (message.substring(k, k + 1) &gt; 0)</p>
          </statement>

          <feedback>
            <p>You do not need to apply that formula here.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>while (message.length() &lt; 0)</p>
          </statement>

          <feedback>
            <p>The inequality is backwards.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>while (message.length() &gt; 0)</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBnorm_2">
      <statement>
        <p>How can you determine how large the “chunk size” should be?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>int chunkSize = this.numRows * this.numCols;</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int chunkSize = this.numRows + this.numCols;</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int chunkSize = this.numRows - this.numCols;</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>int chunkSize = this.numRows / this.numCols;</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBnorm_3">
      <statement>
        <p>
          If chunkSize is greater that message.length(), what should you set
          chunkSize to?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>chunkSize = message.substring(chunkSize);</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>chunkSize = += encryptBlock();</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>chunkSize = message.length();</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>chunkSize = fillBlock(message);</p>
          </statement>

          <feedback>
            <p>This does not give you the correct result.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBnorm_4">
      <statement>
        <p>
          What method needs to be called on message before you can call
          “encryptBlock()”?
        </p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>encryptMessage(message);</p>
          </statement>

          <feedback>
            <p>This is the method we are trying to write!</p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>fillBlock(message);</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>RouteCipher(message);</p>
          </statement>

          <feedback>
            <p>
              RouteCipher is the class of the method we are currently writing.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>encryptBlock(message);</p>
          </statement>

          <feedback>
            <p>
              We need to call a different method before we call encryptBlock()
            </p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      Below is a mixed up version of the correct solution hinted at by the
      previous questions.
    </p>

    <activity label="RouteCipherB" numbered="yes" adaptive="yes" indentation="show" language="java">
      <statement>
        <p>
          The method encryptMessage below contains the correct code for one
          solution to this problem, but it is mixed up. Drag the needed code
          from the left to the right and put them in order with the correct
          indention so that the code would work correctly.
        </p>
      </statement>

      <blocks>
        <block order="8">
          <cline>public String encryptMessage(String message)</cline>
          <cline>{</cline>
          <cline>  String encryptedMessage = "";</cline>
          <cline>  int chunkSize = this.numRows * this.numCols;</cline>
        </block>

        <block order="1">
          <cline>  while (message.length() &gt; 0)</cline>
          <cline>  {</cline>
        </block>

        <block order="6">
          <cline>    if (chunkSize &gt; message.length())</cline>
          <cline>    {</cline>
          <cline>      chunkSize = message.length();</cline>
        </block>

        <block order="5">
          <cline>    } // end if</cline>
        </block>

        <block order="4">
          <cline>    fillBlock(message);</cline>
          <cline>    encryptedMessage += encryptBlock();</cline>
          <cline>    message = message.substring(chunkSize);</cline>
        </block>

        <block order="3">
          <cline>  } // end while</cline>
        </block>

        <block order="2">
          <cline>  return encryptedMessage;</cline>
        </block>

        <block order="7">
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

  <subsection xml:id="solve-routecipherb">
    <title>Solve Route Cipher Part B</title>
    <p>
      Complete the method <c>encryptMessage</c> below.
    </p>

    <activity label="routecipherbCoding">
      <statement>
        <p>
          Complete the method <c>encryptMessage</c> below.
        </p>
      </statement>

      <program interactive="activecode" language="java">
        <code>
public class RouteCipher
{
    /**
     * A two-dimensional array of single-character strings, instantiated in the
     * constructor
     */
    private String[][] letterBlock;

    /** The number of rows of letterBlock, set by the constructor */
    private int numRows;

    /** The number of columns of letterBlock, set by the constructor */
    private int numCols;

    private int counter = 0;

    public RouteCipher(int r, int c)
    {
        letterBlock = new String[r][c];
        this.fillBlock("Meet at midnight");
        this.numRows = r;
        this.numCols = c;
    }

    /**
     * Places a string into letterBlock in row-major order.
     *
     * @param str the string to be processed Postcondition: if str.length() &lt;
     *     numRows * numCols, "A" in each unfilled cell if str.length() &gt; numRows *
     *     numCols, trailing characters are ignored
     */
    private void fillBlock(String str)
    {
        int pos = 0;
        for (int r = 0; r &lt; this.numRows; r++)
        {
            for (int c = 0; c &lt; this.numCols; c++)
            {
                if (pos &lt; str.length())
                {
                    this.letterBlock[r][c] = str.substring(pos, pos + 1);
                    pos++;
                }
                else
                {
                    this.letterBlock[r][c] = "A";
                } // end else block
            } // end inner for
        } // end outer for
    }

    /**
     * Extracts encrypted string from letterBlock in column-major order.
     * Precondition: letterBlock has been filled
     *
     * @return the encrypted string from letterBlock
     */
    private String encryptBlock()
    {
        return "Mte ea";
    }

    /**
     * Encrypts a message.
     *
     * @param message the string to be encrypted
     * @return the encrypted message; if message is the empty string, returns the
     *     empty string
     */
    public String encryptMessage(String message)
    {
        // Complete this method
    }

    public static void main(String[] args)
    {

        RouteCipher ciph = new RouteCipher(2, 3);
        if (ciph.encryptMessage("Meet at midnight")
                .substring(0, 6)
                .equals("Mte ea"))
            System.out.println("Looks like your code works well!");
        else System.out.println("Oops! Make a few changes to your code, please.");
    }
}
        </code>
        <tests>
import static org.junit.Assert.*;

import org.junit.*;

import java.io.*;

public class RunestoneTests extends CodeTestHelper
{

    @Test
    public void testMain() throws IOException
    {
        String output = getMethodOutput("main");
        String expect = "Looks like your code works well!\n";

        boolean passed = getResults(expect, output, "Expected output from main");
        assertTrue(passed);
    }

    @Test
    public void test1()
    {
        RouteCipher ciph = new RouteCipher(2, 3);

        String result =
                String.valueOf(
                        ciph.encryptMessage("Meet at midnight").substring(0, 6).equals("Mte ea"));

        boolean passed = getResults("true", result, "method encryptMessage works");
        assertTrue(passed);
    }
}
        </tests>
      </program>
    </activity>
  </subsection>

  <subsection xml:id="alternate-recursive-solution-routecipherb">
    <title>Alternate Recursive Solution</title>
    <p>
      Instead of using loops, this problem can be solved using recursion. If you
      are unfamiliar with recursion do not worry if the recursive solution does
      not make immediate sense. It is not necessary that you understand
      recursion at this point however, once you have learned about recursion, 
      feel free to return to this question to
      practice working through the recursive solution.
    </p>

    <activity label="FRQRouteCipherBrecur_1">
      <statement>
        <p>What is your base case?</p>
      </statement>

      <choices>
        <choice correct="yes">
          <statement>
            <p>if (message.length() == 0) { return ""; }</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              if (message.length() &lt;= this.numRows * this.numCols) { return
              encryptBlock(); }
            </p>
          </statement>

          <feedback>
            <p>This would not work in this situation.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>return "";</p>
          </statement>

          <feedback>
            <p>This would not work in this situation.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>return encryptBlock();</p>
          </statement>

          <feedback>
            <p>This would not work in this situation.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBrecur_2">
      <statement>
        <p>What kind of recursion will you use?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>Head</p>
          </statement>

          <feedback>
            <p>
              The recursive call is not the first statement in the method hence
              it is not head recursive.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>Tail</p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Tree</p>
          </statement>

          <feedback>
            <p>
              We do not make multiple recursive calls so the method is not tree
              recursive.
            </p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>Body</p>
          </statement>

          <feedback>
            <p>This is not a term that describes recursion.</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <activity label="FRQRouteCipherBrecur_3">
      <statement>
        <p>What is your tail recursive call?</p>
      </statement>

      <choices>
        <choice>
          <statement>
            <p>return "";</p>
          </statement>

          <feedback>
            <p>This is the return statement of the base case.</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>
              return (encryptMessage(message.substring(this.numRows *
              this.numCols)));
            </p>
          </statement>

          <feedback>
            <p>This does not return the correct results</p>
          </feedback>
        </choice>

        <choice>
          <statement>
            <p>return (encryptBlock());</p>
          </statement>

          <feedback>
            <p>
              This is the return statement of one of the conditional base cases.
            </p>
          </feedback>
        </choice>

        <choice correct="yes">
          <statement>
            <p>
              return (encryptBlock() +
              encryptMessage(message.substring(this.numRows * this.numCols)));
            </p>
          </statement>

          <feedback>
            <p>Correct!</p>
          </feedback>
        </choice>
      </choices>
    </activity>

    <p>
      If you still feel unsure of the recursive solution, it is recommended that
      you return to the recursion unit to do some more practice as this problem
      is quite challenging to solve recursively.
    </p>

    <activity label="RouteCipherB_recurpar" numbered="yes" adaptive="yes" indentation="show" language="java">
      <statement>
        <p>
          The method encryptMessage below contains the correct code for one
          solution to this problem, but it is mixed up. Drag the needed code
          from the left to the right and put them in order with the correct
          indention so that the code would work correctly.
        </p>
      </statement>

      <blocks>
        <block order="4">
          <cline>public String encryptMessage(String message)</cline>
          <cline>{</cline>
        </block>

        <block order="3">
          <cline>  if (message.length() == 0)</cline>
          <cline>  {</cline>
          <cline>      return "";</cline>
          <cline>  }</cline>
        </block>

        <block order="6">
          <cline>  fillBlock(message);</cline>
        </block>

        <block order="1">
          <cline>  if (message.length() &lt;= this.numRows * this.numCols)</cline>
          <cline>  {</cline>
          <cline>      return encryptBlock();</cline>
          <cline>  }</cline>
        </block>

        <block order="2">
          <cline>  return (encryptBlock() +</cline>
          <cline>         encryptMessage(message.substring(</cline>
          <cline>            this.numRows * this.numCols)));</cline>
        </block>

        <block order="5">
          <cline>} // end method</cline>
        </block>
      </blocks>
    </activity>
  </subsection>

</section>


